CLASS lcl_buffer DEFINITION.
* 1) define the data buffer
  PUBLIC SECTION.

    TYPES: BEGIN OF ty_buffer.
        INCLUDE TYPE   zaa_t_emp AS data.
    TYPES: flag TYPE c LENGTH 1,
           END OF ty_buffer.

    TYPES tt_emp TYPE SORTED TABLE OF ty_buffer WITH UNIQUE KEY eid.

    CLASS-DATA mt_buffer TYPE tt_emp.
ENDCLASS.

CLASS lhc_ZAA_EMP_CDS DEFINITION FINAL INHERITING FROM cl_abap_behavior_handler..
PRIVATE SECTION.
    METHODS modify FOR BEHAVIOR IMPORTING
      roots_to_create    FOR CREATE ZAA_EMP_CDS
      roots_to_update    FOR UPDATE ZAA_EMP_CDS
      roots_to_delete    FOR DELETE ZAA_EMP_CDS
      roots_to_set_favorite for action zaa_emp_cds~set_favorite result et_emp_fav.

    METHODS read FOR BEHAVIOR
      IMPORTING it_emp_key FOR READ ZAA_EMP_CDS RESULT et_booking.

    METHODS lock FOR BEHAVIOR
      IMPORTING it_emp_key FOR LOCK ZAA_EMP_CDS.
    METHODS get_features for features importing keys request requested_features for zaa_emp_cds result et_emp_feature.

ENDCLASS.

CLASS lhc_ZAA_EMP_CDS IMPLEMENTATION.

  METHOD modify.

    " %cid = control field

    LOOP AT roots_to_delete INTO DATA(ls_delete).
      IF ls_delete-eid IS INITIAL.
        ls_delete-eid = mapped-zaa_emp_cds[ %cid = ls_delete-%cid_ref ]-eid.
      ENDIF.

      READ TABLE lcl_buffer=>mt_buffer WITH KEY eid = ls_delete-eid ASSIGNING field-symbol(<ls_buffer>).
      IF sy-subrc = 0.
        IF <ls_buffer>-flag = 'C'.
          DELETE TABLE lcl_buffer=>mt_buffer WITH TABLE KEY eid = ls_delete-eid.
        ELSE.
          <ls_buffer>-flag = 'D'.
        ENDIF.
      ELSE.
        INSERT VALUE #( flag = 'D' eid = ls_delete-eid ) INTO TABLE lcl_buffer=>mt_buffer.
      ENDIF.
    ENDLOOP.

    " handle create
    IF roots_to_create IS NOT INITIAL.
      SELECT SINGLE MAX( eid ) FROM zaa_t_emp INTO @DATA(lv_max_eid).
    ENDIF.

    LOOP AT roots_to_create INTO DATA(ls_create).
      ADD 1 TO lv_max_eid.
      ls_create-%data-eid = lv_max_eid.
      GET TIME STAMP FIELD DATA(zv_tsl).
      ls_create-%data-lastchangedat = zv_tsl.
      ls_create-%data-lastchangeby = sy-uname.
      INSERT VALUE #( flag = 'C' data = CORRESPONDING #( ls_create-%data ) ) INTO TABLE lcl_buffer=>mt_buffer.

      IF ls_create-%cid IS NOT INITIAL.
        INSERT VALUE #( %cid = ls_create-%cid  eid = ls_create-eid ) INTO TABLE mapped-zaa_emp_cds.
      ENDIF.
    ENDLOOP.

    " handle update
    IF roots_to_update IS NOT INITIAL.
      LOOP AT roots_to_update INTO DATA(ls_update).
        IF ls_update-eid IS INITIAL.
          ls_update-eid = mapped-zaa_emp_cds[ %cid = ls_update-%cid_ref ]-eid.
        ENDIF.

        READ TABLE lcl_buffer=>mt_buffer WITH KEY eid = ls_update-eid ASSIGNING <ls_buffer>.
        IF sy-subrc <> 0.

          SELECT SINGLE * FROM zaa_t_emp WHERE eid = @ls_update-eid INTO @DATA(ls_db).
          INSERT VALUE #( flag = 'U' data = ls_db ) INTO TABLE lcl_buffer=>mt_buffer ASSIGNING <ls_buffer>.
        ENDIF.

        IF ls_update-%control-efname IS NOT INITIAL.
          <ls_buffer>-efname = ls_update-efname.
        ENDIF.
        IF ls_update-%control-esalary  IS NOT INITIAL..
          <ls_buffer>-esalary = ls_update-esalary.
        ENDIF.
        IF ls_update-%control-currencycode  IS NOT INITIAL.
          <ls_buffer>-currencycode = ls_update-currencycode.
        ENDIF.
        IF ls_update-%control-country  IS NOT INITIAL.
          <ls_buffer>-country = ls_update-country.
        ENDIF.
        IF ls_update-%control-email  IS NOT INITIAL..
          <ls_buffer>-email = ls_update-email.
        ENDIF.
        IF ls_update-%control-dob  IS NOT INITIAL..
          <ls_buffer>-dob = ls_update-dob.
        ENDIF.

        <ls_buffer>-lastchangeby = sy-uname.
        GET TIME STAMP FIELD DATA(zv_tsl2).
        <ls_buffer>-lastchangedat = zv_tsl2.
      ENDLOOP.
    ENDIF.

    IF roots_to_set_favorite is not initial.
        data(ls_emp_fav) = roots_to_set_favorite[ 1 ].
        update zaa_t_emp set favorite = abap_true where eid = ls_emp_fav-eid.

        if sy-subrc eq 0.
            select * from zaa_t_emp into corresponding fields of table et_emp_fav
            where eid = ls_emp_fav-eid.
        endif.

    endif.

  ENDMETHOD.


  METHOD read.
  LOOP AT it_emp_key INTO DATA(ls_emp_key).
      " check if it is in buffer (and not deleted).
      READ TABLE lcl_buffer=>mt_buffer WITH KEY eid = ls_emp_key-eid INTO DATA(ls_emp).
      IF sy-subrc = 0 AND ls_emp-flag <> 'U'.
        INSERT CORRESPONDING #( ls_emp-data ) INTO TABLE et_booking.
      ELSE.
        SELECT SINGLE * FROM zaa_t_emp WHERE eid = @ls_emp_key-eid INTO @DATA(ls_db).
        IF sy-subrc = 0.
          INSERT CORRESPONDING #( ls_db ) INTO TABLE et_booking.
        ELSE.
          INSERT VALUE #( eid = ls_emp_key-eid ) INTO TABLE failed-zaa_emp_cds.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD lock.
   "provide the appropriate lock handling if required
  ENDMETHOD.

  METHOD get_features.
  read entity zaa_emp_cds from value #(
         for keyval in keys ( %key = keyval-%key
           %control = value #(
                eid = if_abap_behv=>mk-on
                favorite = if_abap_behv=>mk-on ) ) )
       result data(lt_emp)
       failed data(lt_emp_failed)
       reported data(lt_emp_reported).
       et_emp_feature = value #( FOR ls_emp in lt_emp (
                        %key = ls_emp-%key
                        %features-%action-set_favorite = COND #( WHEN ls_emp-favorite = abap_true then if_abap_behv=>fc-o-disabled
                                                                   else if_abap_behv=>fc-o-enabled )
                        ) ).
  ENDMETHOD.

ENDCLASS.

CLASS lsc_ZAA_EMP_CDS DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PROTECTED SECTION.

    METHODS check_before_save REDEFINITION.

    METHODS finalize          REDEFINITION.

    METHODS save              REDEFINITION.

ENDCLASS.

CLASS lsc_ZAA_EMP_CDS IMPLEMENTATION.

  METHOD check_before_save.
  ENDMETHOD.

  METHOD finalize.
  ENDMETHOD.

  METHOD save.
    DATA lt_data TYPE STANDARD TABLE OF zaa_t_emp.

    lt_data = VALUE #(  FOR row IN lcl_buffer=>mt_buffer WHERE  ( flag = 'C' ) (  row-data ) ).
    IF lt_data IS NOT INITIAL.
      INSERT zaa_t_emp FROM TABLE @lt_data.
    ENDIF.
    lt_data = VALUE #(  FOR row IN lcl_buffer=>mt_buffer WHERE  ( flag = 'U' ) (  row-data ) ).
    IF lt_data IS NOT INITIAL.
      UPDATE zaa_t_emp FROM TABLE @lt_data.
    ENDIF.
    lt_data = VALUE #(  FOR row IN lcl_buffer=>mt_buffer WHERE  ( flag = 'D' ) (  row-data ) ).
    IF lt_data IS NOT INITIAL.
      DELETE zaa_t_emp FROM TABLE @lt_data.
    ENDIF.
  ENDMETHOD.

ENDCLASS.