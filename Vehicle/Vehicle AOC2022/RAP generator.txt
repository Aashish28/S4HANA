CLASS zcl_rapg_ms DEFINITION
  PUBLIC
  INHERITING FROM cl_xco_cp_adt_simple_classrun
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

  PROTECTED SECTION.
    METHODS main REDEFINITION.
    METHODS get_json_string
      RETURNING VALUE(json_string) TYPE string.
  PRIVATE SECTION.

ENDCLASS.



CLASS zcl_rapg_ms IMPLEMENTATION.


  METHOD get_json_string.
    json_string = '{' && |\r\n|  &&
                  '    "$schema": "https://raw.githubusercontent.com/SAP-samples/cloud-abap-rap/main/json_schemas/RAPGenerator-schema-all.json",' && |\r\n|  &&
                  '    "namespace": "Z",' && |\r\n|  &&
                  '    "bindingType": "odata_v2_ui",' && |\r\n|  &&
                  '    "dataSourceType": "table",' && |\r\n|  &&
                  '    "implementationtype": "managed_semantic",' && |\r\n|  &&
                  '    "package": "ZABAP22",' && |\r\n|  &&
                  '    "draftenabled": false,' && |\r\n|  &&
                  '    "prefix": "",' && |\r\n|  &&
                  '    "suffix": "_M",' && |\r\n|  &&
                  '    "hierarchy": {' && |\r\n|  &&
                  '        "entityName": "Fule",' && |\r\n|  &&
                  '        "dataSource": "zaa_t_fueltype",' && |\r\n|  &&
                  '        "objectId": "ftid",' && |\r\n|  &&
                  '        "etagMaster": "last_changed_at",' && |\r\n|  &&
                  '        "lastChangedAt": "local_last_changed_at",' && |\r\n|  &&
                  '        "lastChangedBy": "local_last_changed_by",' && |\r\n|  &&
                  '        "localInstanceLastChangedAt": "last_changed_at",' && |\r\n|  &&
                  '        "createdAt": "local_created_at",' && |\r\n|  &&
                  '        "createdBy": "local_created_by"' && |\r\n|  &&
                  '    },' && |\r\n|  &&
                  '    "associations": [' && |\r\n|  &&
                  '        {' && |\r\n|  &&
                  '          "name": "_Currency",' && |\r\n|  &&
                  '          "target": "I_Currency",' && |\r\n|  &&
                  '          "cardinality": "one_to_one",' && |\r\n|  &&
                  '          "conditions": [' && |\r\n|  &&
                  '            {' && |\r\n|  &&
                  '              "projectionField": "Currencycode",' && |\r\n|  &&
                  '              "associationField": "Currency"' && |\r\n|  &&
                  '            }' && |\r\n|  &&
                  '          ]' && |\r\n|  &&
                  '        }' && |\r\n|  &&
                  '      ],' && |\r\n|  &&
                  '      "valueHelps": [' && |\r\n|  &&
                  '        {' && |\r\n|  &&
                  '            "alias": "Currency",' && |\r\n|  &&
                  '            "name": "I_Currency",' && |\r\n|  &&
                  '            "localElement": "Currencycode",' && |\r\n|  &&
                  '            "element": "Currency"' && |\r\n|  &&
                  '        }]' && |\r\n|  &&
                  '}' .
  ENDMETHOD.


  METHOD main.
    TRY.
        DATA(json_string) = get_json_string(  ).
        DATA(rap_generator) = /dmo/cl_rap_generator=>create_for_cloud_development( json_string ).
        "DATA(rap_generator) = /dmo/cl_rap_generator=>create_for_S4_2020_development( json_string ).
        DATA(framework_messages) = rap_generator->generate_bo( ).
        IF rap_generator->exception_occured( ).
          out->write( |Caution: Exception occured | ) .
          out->write( |Check repository objects of RAP BO { rap_generator->get_rap_bo_name(  ) }.| ) .
        ELSE.
          out->write( |RAP BO { rap_generator->get_rap_bo_name(  ) }  generated successfully| ) .
        ENDIF.
        out->write( |Messages from framework:| ) .
        LOOP AT framework_messages INTO DATA(framework_message).
          out->write( framework_message ).
        ENDLOOP.
      CATCH /dmo/cx_rap_generator INTO DATA(rap_generator_exception).
        out->write( 'RAP Generator has raised the following exception:' ) .
        out->write( rap_generator_exception->get_text(  ) ).
    ENDTRY.
  ENDMETHOD.
ENDCLASS.